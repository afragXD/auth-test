generator client {
  provider = "prisma-client-js"
  output   = "./__generated__"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id String @id @default(uuid())

  displayName String
  picture String?

  email String @unique
  password String?

  role UserRole @default(REGULAR)

  isVerified Boolean @default(false) @map("is_verified")
  isTwoFactorEnabled Boolean @default(false) @map("is_two_factor_enabled")

  accounts Account[]
  rating UserRating?

  gamesAsPlayer1 Game[] @relation("player1")
  gamesAsPlayer2 Game[] @relation("player2")
  spectators Game[] @relation("spectators")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model Account {
  id String @id @default(uuid())

  type String
  provider String

  refreshToken String? @map("refresh_token")
  accessToken String? @map("access_token")
  expiresAt Int @map("expires_at")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User? @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String? @map("user_id")

  @@map("accounts")
}

model Token {
  id String @id @default(uuid())

  email String
  token String @unique
  type TokenType
  expiresIn DateTime @map("expires_in")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("tokens")
}

model Game {
  id String @id @default(uuid())

  player1 User @relation("player1", fields: [player1Id], references: [id])
  player1Id String @map("player1_id")

  player2 User? @relation("player2", fields: [player2Id], references: [id])
  player2Id String? @map("player2_id")

  spectators User[] @relation("spectators")

  status GameStatus @default(PENDING)
  boardState Json? @map("board_state")
  currentTurn String? @map("current_turn")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("games")
}

model UserRating {
  id String @id @default(uuid())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique @map("user_id")

  rating Int @default(1000)
  gamesPlayed Int @default(0) @map("games_played")
  wins Int @default(0)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("user_ratings")
}

enum GameStatus {
  PENDING
  ACTIVE
  COMPLETED
  CANCELLED
}

enum UserRole {
  REGULAR
  ADMIN
}

enum TokenType {
  VERIFICATION
  TWO_FACTOR
  PASSWORD_RESET
}